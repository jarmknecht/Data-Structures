#include <iostream>
#include <exception>
#include <string>

using namespace std;

#include "TestCase.h"
#include "MySolver.h"

/*
char maze[] =
{//   0    1    2    3    4    5    6    7    8    9    10
'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 1
'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 2
'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 3
'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 4
'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 5
'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 6
'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 7
'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 8
'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 9
'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
};

*/




void TestSmallNoBranches()
{
	char maze[] =
	{//   0    1    2    3    4    5    6 
		'#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', ' ', ' ', '#', // 1
		'#', ' ', '#', '#', '#', ' ', '#', // 2
		'#', ' ', ' ', ' ', '#', ' ', '#', // 3
		'#', '#', '#', ' ', '#', ' ', '#', // 4
		' ', ' ', ' ', ' ', '#', ' ', '#', // 5
		'#', '#', '#', '#', '#', ' ', '#', // 6
		'E', ' ', ' ', ' ', ' ', ' ', '#', // 7
		'#', '#', '#', '#', '#', '#', '#', // 8
	};

	TestCase tc("Test a small maze with no branches and one solution.");

	try
	{
		MySolver solver(maze, 7, 9);
		if (solver.SolveMaze(0, 5))
		{
			tc.LogResult(true, "Maze was solved!");
			tc.Assert(solver.GetCell(0, 5) == '+', "Path marked at (0, 5).");
			tc.Assert(solver.GetCell(3, 5) == '+', "Path marked at (3, 5).");
			tc.Assert(solver.GetCell(4, 1) == '+', "Path marked at (4, 1).");
			tc.Assert(solver.GetCell(1, 7) == '+', "Path marked at (1, 7).");
			tc.Assert(solver.GetCell(5, 5) == '+', "Path marked at (5, 5).");
		}
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}


void TestSmallNoSolution()
{
	char maze[] =
	{//  0    1    2    3    4    5    6 
		'#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', ' ', ' ', '#', // 1
		'#', ' ', '#', '#', '#', ' ', '#', // 2
		'#', ' ', '#', ' ', ' ', ' ', '#', // 3
		'#', ' ', '#', ' ', '#', ' ', '#', // 4
		' ', ' ', '#', ' ', '#', ' ', '#', // 5
		'#', ' ', '#', '#', '#', ' ', '#', // 6
		'#', ' ', ' ', ' ', '#', ' ', '#', // 7
		'#', '#', '#', '#', '#', '#', '#', // 8
	};

	TestCase tc("Test a small maze with no solution.");

	try
	{
		MySolver solver(maze, 7, 9);
		if (solver.SolveMaze(0, 5))
			tc.LogResult(false, "Maze should not have been solved.");
		else
		{
			tc.LogResult(true, "No solution found.");
			tc.Assert(solver.GetCell(0, 5) == ' ', "No mark at (0,5).");
			tc.Assert(solver.GetCell(3, 5) == ' ', "No mark at (3,5).");
			tc.Assert(solver.GetCell(5, 7) == ' ', "No mark at (5,7).");
		}
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}


void TestStartLeft()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9    10
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 1
		'#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', // 2
		'#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', // 3
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 4
		'#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 5
		'#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', // 6
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 7
		'#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', // 8
		'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', 'E', // 9
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
	};

	TestCase tc("Test starting on the left side.");

	try
	{
		MySolver solver(maze, 11, 11);
		if (solver.SolveMaze(0, 1))
		{
			tc.LogResult(true, "Maze was solved!");
			tc.Assert(solver.GetCell(9, 9) == '+', "Path marked at (9, 9).");
			tc.Assert(solver.GetCell(7, 3) == '+', "Path marked at (7, 3).");
			tc.Assert(solver.GetCell(3, 7) == '+', "Path marked at (3, 7).");
			tc.Assert(solver.GetCell(3, 1) == '+', "Path marked at (3, 1).");
			tc.Assert(solver.GetCell(4, 1) == ' ', "No mark at (4, 1).");
			tc.Assert(solver.GetCell(2, 5) == ' ', "No mark at (2, 5).");
			tc.Assert(solver.GetCell(2, 7) == ' ', "No mark at (2, 7).");
			tc.Assert(solver.GetCell(3, 8) == ' ', "No mark at (3, 8).");
			tc.Assert(solver.GetCell(7, 2) == ' ', "No mark at (7, 2).");
		}
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestStartRight()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9    10
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 1
		'#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 2
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 3
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', // 4
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 5
		'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', // 6
		'E', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', // 7
		'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', // 8
		'#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', // 9
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
	};

	TestCase tc("Test starting on the right side.");

	try
	{
		MySolver solver(maze, 11, 11);
		if (solver.SolveMaze(10, 7))
		{
			tc.LogResult(true, "Maze was solved!");
			tc.Assert(solver.GetCell(1, 5) == '+', "Path marked at (1, 5).");
			tc.Assert(solver.GetCell(5, 1) == '+', "Path marked at (5, 1).");
			tc.Assert(solver.GetCell(7, 5) == '+', "Path marked at (7, 5).");
			tc.Assert(solver.GetCell(10, 7) == '+', "Path marked at (10, 7).");
			tc.Assert(solver.GetCell(9, 8) == ' ', "No mark at (9, 8).");
			tc.Assert(solver.GetCell(9, 6) == ' ', "No mark at (9, 6).");
			tc.Assert(solver.GetCell(7, 4) == ' ', "No mark at (7, 4).");
			tc.Assert(solver.GetCell(2, 1) == ' ', "No mark at (2, 1).");
			tc.Assert(solver.GetCell(3, 6) == ' ', "No mark at (3, 6).");
			tc.Assert(solver.GetCell(1, 4) == ' ', "No mark at (1, 4).");
			tc.Assert(solver.GetCell(1, 8) == ' ', "No mark at (1, 8).");
		}
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestStartTop()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9    10
		'#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', // 0
		'E', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', // 1
		'#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', // 2
		'#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 3
		'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', // 4
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 5
		'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', // 6
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 7
		'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', // 8
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', // 9
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
	};

	TestCase tc("Test starting on the top.");

	try
	{
		MySolver solver(maze, 11, 11);
		if (solver.SolveMaze(7, 0))
		{
			tc.LogResult(true, "Maze was solved!");
			tc.Assert(solver.GetCell(1, 7) == '+', "Path marked at (1, 7).");
			tc.Assert(solver.GetCell(1, 5) == '+', "Path marked at (1, 5).");
			tc.Assert(solver.GetCell(5, 5) == '+', "Path marked at (5, 5).");
			tc.Assert(solver.GetCell(7, 1) == '+', "Path marked at (7, 1).");
			tc.Assert(solver.GetCell(8, 1) == ' ', "No mark at (9, 8).");
			tc.Assert(solver.GetCell(6, 5) == ' ', "No mark at (9, 6).");
			tc.Assert(solver.GetCell(3, 8) == ' ', "No mark at (7, 4).");
			tc.Assert(solver.GetCell(1, 8) == ' ', "No mark at (2, 1).");
			tc.Assert(solver.GetCell(2, 5) == ' ', "No mark at (3, 6).");
		}
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestStartBottom()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9    10
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', 'E', // 1
		'#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', // 2
		'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', // 3
		'#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', // 4
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 5
		'#', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#', // 6
		'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', // 7
		'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', // 8
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 9
		'#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
	};

	TestCase tc("Test starting on the bottom.");

	try
	{
		MySolver solver(maze, 11, 11);
		if (solver.SolveMaze(1, 10))
		{
			tc.LogResult(true, "Maze was solved!");
			tc.Assert(solver.GetCell(1, 9) == '+', "Path marked at (1, 9).");
			tc.Assert(solver.GetCell(1, 5) == '+', "Path marked at (1, 5).");
			tc.Assert(solver.GetCell(3, 3) == '+', "Path marked at (3, 3).");
			tc.Assert(solver.GetCell(9, 2) == '+', "Path marked at (9, 2).");
			tc.Assert(solver.GetCell(2, 9) == ' ', "No mark at (2, 9).");
			tc.Assert(solver.GetCell(2, 5) == ' ', "No mark at (2, 5).");
			tc.Assert(solver.GetCell(3, 2) == ' ', "No mark at (3, 2).");
			tc.Assert(solver.GetCell(7, 4) == ' ', "No mark at (7, 4).");
			tc.Assert(solver.GetCell(8, 1) == ' ', "No mark at (8, 1).");
		}
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestStartEndMiddle()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9    10
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', // 1
		'#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', // 2
		'#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', // 3
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 4
		'#', ' ', '#', ' ', ' ', ' ', '#', 'E', '#', ' ', '#', // 5
		'#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', // 6
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', // 7
		'#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', // 8
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 9
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
	};

	TestCase tc("Test starting and ending somewhere in the middle.");

	try
	{
		MySolver solver(maze, 11, 11);
		if (solver.SolveMaze(5, 5))
		{
			tc.LogResult(true, "Maze was solved!");
			tc.Assert(solver.GetCell(9, 2) == ' ', "No mark at (2, 9).");
			tc.Assert(solver.GetCell(5, 4) == ' ', "No mark at (2, 5).");
			tc.Assert(solver.GetCell(3, 4) == ' ', "No mark at (3, 2).");
			tc.Assert(solver.GetCell(2, 7) == ' ', "No mark at (7, 4).");
			tc.Assert(solver.GetCell(9, 8) == ' ', "No mark at (8, 1).");
		}
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestCycles()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9    10
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', // 1
		'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', // 2
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 3
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 4
		' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', // 5
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 6
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 7
		'#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', 'E', // 8
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 9
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 10
	};

	TestCase tc("Test a maze that has cycles.");

	try
	{
		MySolver solver(maze, 11, 11);
		if (solver.SolveMaze(0, 5))
			tc.LogResult(true, "Maze was solved!");
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestBigMaze1()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', // 1
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', // 2
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', // 3
		'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', // 4
		'E', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 5
		'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', // 6
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 7
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', // 8
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 9
		'#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', // 10
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 11
		'#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', // 12
		'#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 13
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', // 14
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 15
		'#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', // 16
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', // 17
		'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', // 18
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', // 19
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 20
	};

	TestCase tc("Big maze test 1.");

	try
	{
		MySolver solver(maze, 21, 21);
		if (solver.SolveMaze(11, 0))
			tc.LogResult(true, "Maze was solved!");
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}

void TestBigMaze2()
{
	char maze[] =
	{//  0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20
		'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', // 0
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', // 1
		'#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', // 2
		'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 3
		'#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', // 4
		'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', // 5
		'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', // 6
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', // 7
		'#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', // 8
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 9
		'#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', // 10
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', // 11
		'#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', // 12
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 13
		'#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', // 14
		'#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', // 15
		'#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', // 16
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', // 17
		'#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', // 18
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 19
		'#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', // 20
		'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', // 21
		'#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', // 22
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 23
		'#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#', // 24
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', // 25
		'#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', // 26
		'#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', // 27
		'#', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', // 28
		'#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', // 29
		'#', 'E', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'  // 30
	};

	TestCase tc("Big maze test 2.");

	try
	{
		MySolver solver(maze, 21, 31);
		if (solver.SolveMaze(20, 29))
			tc.LogResult(true, "Maze was solved!");
		else
			tc.LogResult(false, "No solution found.");
		solver.Print();
	}
	catch (exception &ex)
	{
		tc.LogException(ex);
	}
}



void main()
{
	TestSmallNoBranches();
	TestSmallNoSolution();
	TestStartLeft();
	TestStartRight();
	TestStartTop();
	TestStartBottom();
	TestStartEndMiddle();
	TestCycles();
	TestBigMaze1();
	TestBigMaze2();

	TestCase::PrintSummary();
}